#include "secrets.h"
#include <WiFiClientSecure.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include "WiFi.h"
#include "DHT.h"
#include "time.h"

#define DHTTYPE DHT11
#define DHTPIN 15
DHT dht(DHTPIN, DHTTYPE);



#define AWS_IOT_PUBLISH_TOPIC   "esp32/pub1"
#define AWS_IOT_SUBSCRIBE_TOPIC "esp32/sub1"


const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 0;
const int   daylightOffset_sec = 3600;

WiFiClientSecure net = WiFiClientSecure();
PubSubClient client(net);

void connectAWS()
{
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  Serial.println("Connecting to Wi-Fi");

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  // Configure WiFiClientSecure to use the AWS IoT device credentials
  net.setCACert(AWS_CERT_CA);
  net.setCertificate(AWS_CERT_CRT);
  net.setPrivateKey(AWS_CERT_PRIVATE);

  // Connect to the MQTT broker on the AWS endpoint we defined earlier
  client.setServer(AWS_IOT_ENDPOINT, 8883);

  // Create a message handler
  client.setCallback(messageHandler);

  Serial.print("Connecting to AWS IOT");

  while (!client.connect(THINGNAME)) {
    Serial.print(".");
    delay(100);
  }

  if (!client.connected()) {
    Serial.println("AWS IoT Timeout!");
    return;
  }

  // Subscribe to a topic
  client.subscribe(AWS_IOT_SUBSCRIBE_TOPIC);

  Serial.println("AWS IoT Connected!");
}

void publishMessage()
{

  //  unsigned long runMillis= millis();
  //  unsigned long allSeconds=millis()/1000;
  //  int runHours= allSeconds/3600;
  //  int secsRemaining=allSeconds%3600;
  //  int runMinutes=secsRemaining/60;
  //  int runSeconds=secsRemaining%60;

  StaticJsonDocument<200> doc;
  // char buf[21];
  // sprintf(buf,"%02d:%02d:%02d",runHours,runMinutes,runSeconds);
  //  doc["time"] = (buf);

  doc["time"] = printLocalTime();

  float d = dht.readTemperature();
  doc["temp1"] = d;
  float h = dht.readHumidity();
  doc["humid1"] = h;
  char jsonBuffer[512];
  serializeJson(doc, jsonBuffer); // print to client

  client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);
}

void messageHandler(char* topic, byte* payload, unsigned int length) {
  Serial.print("incoming: ");
  Serial.println(topic);

  StaticJsonDocument<200> doc;
  deserializeJson(doc, payload);
  const char* message = doc["message"];
  Serial.println(message);
}

void setup() {
  Serial.begin(9600);
  connectAWS();
  // Init and get the time
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);

  printLocalTime();
  dht.begin();
}

void loop() {
  publishMessage();
  client.loop();
  delay(1000);
}

/*
  String printLocalTime() {
  time_t now;
  char strftime_buf[64];
  struct tm timeinfo;

  time(&now);
  // Set timezone to China Standard Time
  setenv("TZ", "CST-8", 1);
  tzset();

  localtime_r(&now, &timeinfo);
  strftime(strftime_buf, sizeof(strftime_buf), "%c", &timeinfo);
  return strftime_buf;
  }
*/
String printLocalTime() {

  char outputty[64];
  time_t now;
  char strftime_buf[64];
  struct tm timeinfo;

  time(&now);
  setenv("TZ", "GMT+0BST-1,M3.5.0/01:00:00,M10.5.0/02:00:00", 1);
  tzset();

  localtime_r(&now, &timeinfo);
  strftime(strftime_buf, sizeof(strftime_buf), "%c", &timeinfo);
  sprintf(outputty, "%s", strftime_buf);
  return outputty;
}
